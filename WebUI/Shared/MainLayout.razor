@using System.Security.Claims
@using WebUI.Models
@using WebUI.Services
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components
@using WebUI.ServicesModel.Common

@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@inject NavMenuService NavMenuService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService;
@inject NavigationManager UriHelper

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout>
    <RadzenHeader>
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="3">
                <RadzenSidebarToggle Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })" />
                @* <RadzenLabel Text=@($"Фермер - {tenantName}") /> *@
            </RadzenColumn>
            <RadzenColumn Size="9">
                <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" class="rz-px-2">
                    <RadzenProfileMenu Visible="@isAuthenticated" Click="@ProfileMenuClick">
                        <ChildContent>
                            <RadzenProfileMenuItem Text="Смяна на парола" Value="ChangePassword" Icon="lock_reset" />
                            <RadzenProfileMenuItem Text="Излез" Value="Logout" Icon="power_settings_new" />
                        </ChildContent>
                        <Template>
                            @userName
                            <RadzenIcon Icon="account_box" />
                        </Template>
                    </RadzenProfileMenu>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
        <ChildContent>
@*             @if (isAuthenticated)
            {
                <FarmingSeasonPicker Visible="@(NavigationManager.Uri.Contains("/subsidy"))" />
            } *@
            
                <RadzenContentContainer Name="main">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12 pt-4 pb-5 px-3 px-lg-5">
                                @Body
                            </div>
                        </div>
                    </div>
                </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded" style="z-index: 2">
        <ChildContent>
            <RadzenPanelMenu Match="NavLinkMatch.Prefix">
                @foreach (var menuItem in menuItems)
                {
                    <NavigationItem @bind-Expanded=@menuItem.Expanded NavMenuItem=@menuItem>
                        @if (menuItem.Children is not null)
                        {
                            @foreach (var child in menuItem.Children)
                            {
                                @if (child.Children is not null)
                                {
                                    <NavigationItem NavMenuItem="@child">
                                        @foreach (var secondChild in child.Children)
                                        {
                                            <NavigationItem NavMenuItem=@secondChild />
                                        }
                                    </NavigationItem>
                                }
                                else
                                {
                                    <NavigationItem NavMenuItem=@child />
                                }
                            }
                        }
                    </NavigationItem>
                }
            </RadzenPanelMenu>
        </ChildContent>
    </RadzenSidebar>
</RadzenLayout>



@code {
    bool sidebarExpanded = true;
    bool bodyExpanded = false;

    RadzenSidebar? sidebar0 = default!;
    RadzenBody? body0 = default!;
    string tenantName = default!;
    bool isAuthenticated = false;
    string userName = default!;
    bool showFarmingSeasonPicker = false;

    IEnumerable<NavMenuItem> menuItems = new List<NavMenuItem>();

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;

        var role = authState?.User?.Claims?.FirstOrDefault(c => c.Type.ToLower() == "role")?.Value;
        tenantName = authState?.User?.Claims?.FirstOrDefault(c => c.Type.ToLower() == "tenantname")?.Value ?? "";
        userName = authState?.User?.Claims?.FirstOrDefault(c => c.Type.ToLower() == "name")?.Value ?? "";

        if (role is not null)
        {
            menuItems = NavMenuService.GetMenuItems(role);

            Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
        }
    }

    protected async Task ProfileMenuClick(RadzenProfileMenuItem args)
    {
        if (args.Value == "Logout")
        {
            await LocalStorageService.RemoveItemAsync("token");

            UriHelper.NavigateTo($"{UriHelper.BaseUri}login");
        }
        if (args.Value == "ChangePassword")
        {
            UriHelper.NavigateTo($"{UriHelper.BaseUri}changePassword");
        }
    }
}
